"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("./common");
const database_1 = require("./database");
const transformer_1 = require("./transformer");
const importer_1 = require("./importer");
const config_1 = require("./config");
__export(require("./config"));
class Seeder {
    constructor(config) {
        this.config = config_1.defaultSeederConfig;
        this.readCollectionsFromPath = (path, partialConfig) => {
            const config = config_1.mergeCollectionReadingOptions(partialConfig);
            let collections;
            try {
                const { CollectionPopulator } = require('./populator');
                const populator = new CollectionPopulator(config.extensions);
                common_1.log(`Reading collections from ${path}...`);
                collections = populator.readFromPath(path);
            }
            catch (err) {
                throw wrapError(err);
            }
            if (config.transformers.length > 0) {
                common_1.log('Transforming collections...');
                collections = new transformer_1.CollectionTransformer().transform(collections, config.transformers);
            }
            return collections;
        };
        this.import = (collections, partialConfig) => __awaiter(this, void 0, void 0, function* () {
            if (collections.length === 0) {
                common_1.log('No data to import. Finishing...');
                return;
            }
            common_1.log('Starting collection import...');
            const config = config_1.mergeSeederConfig(partialConfig, this.config);
            const databaseConnector = new database_1.DatabaseConnector(config.databaseReconnectTimeout);
            try {
                const database = yield databaseConnector.connect(config.database);
                if (!config.dropDatabase && config.dropCollections) {
                    common_1.log('Dropping collections...');
                    for (const collection of collections) {
                        yield database.dropCollectionIfExists(collection.name);
                    }
                }
                if (config.dropDatabase) {
                    common_1.log('Dropping database...');
                    yield database.drop();
                }
                yield new importer_1.CollectionImporter(database).import(collections);
            }
            catch (err) {
                throw wrapError(err);
            }
            finally {
                yield databaseConnector.close();
            }
            common_1.log('Finishing...');
        });
        this.config = config_1.mergeSeederConfig(config);
    }
}
Seeder.Transformers = transformer_1.DefaultTransformers;
exports.Seeder = Seeder;
const wrapError = (err) => {
    const error = new Error(`${err.name}: ${err.message}`);
    error.name = 'MongoSeedingError';
    return error;
};
//# sourceMappingURL=index.js.map