"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class Database {
    constructor(db) {
        this.db = db;
    }
    insertDocumentsIntoCollection(documentsToInsert, collectionName) {
        return __awaiter(this, void 0, void 0, function* () {
            const documentsCopy = documentsToInsert.map(document => (Object.assign({}, document)));
            return this.db.collection(collectionName).insertMany(documentsCopy);
        });
    }
    drop() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.db.dropDatabase();
        });
    }
    ifCollectionExist(collectionName) {
        return __awaiter(this, void 0, void 0, function* () {
            const collections = yield this.db.collections();
            return collections
                .map(collection => collection.collectionName)
                .includes(collectionName);
        });
    }
    dropCollectionIfExists(collectionName) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(yield this.ifCollectionExist(collectionName))) {
                return;
            }
            return this.db.collection(collectionName).drop();
        });
    }
}
exports.Database = Database;
//# sourceMappingURL=database.js.map